scopes    = require('../scopes')
Splat     = require('../expressions/splat')
Dot       = require('../expressions/dot')
Operation = require('../expressions/operation')

prototype TFunction
  def constructor(name, args, body, type)
    self.name = name
    self.args = args || []
    self.body = body
    self.type = type
  end

  def compile(options = {})
    rs = nil
    scopes.withScope -> { rs = self.compileFunction(options) }
    return rs
  end

  def compileFunction(options)
    self.prepareDefinition(options)
    args = self.prepareArguments()

    rs = []
    rs.push self.fullname + ' = ' unless self.isLambda()
    rs.push 'function '
    rs.push '(' + args.definition.join(', ') + ') {'
    rs.push 'var self = this;' if options.proto
    rs.push args.body.join('')
    rs.push self.body.compile(scope: true) if self.body
    rs.push '}'
    rs.push ';' unless self.isLambda()

    return rs.join('')
  end

  def prepareDefinition(options)
    return if self.isLambda()
    name = self.name.compile()

    if options.proto
      self.fullname = options.proto + '.prototype.' + name
    elsif options.prefix
      self.fullname = options.prefix + '.' + name
    elsif self.name and self.name instanceof Dot
      self.fullname = name
    else
      scopes.pushIdentifier(name, level: 1)
      self.fullname = name
    end
  end

  def prepareArguments
    definition = []
    body = []

    for arg of self.args
      case arg.constructor
      when Operation
        ident = arg.left.compile()
        definition.push(ident)
        body.push('if (' + ident + ' == null) ' + arg.compile() + ';')
      when Splat
        scopes.pushIdentifier(ident = arg.compile())
        v = 'Array.prototype.slice.call(arguments, ' + definition.length + ') || []'
        body.push('var ' + ident + ' = ' + v + ';')
      else
        scopes.pushIdentifier(arg.compile())
        definition.push(arg.compile())
      end
    end

    return { definition: definition, body: body }
  end

  def isLambda
    return !self.name
  end

  #def isDirectDefinition(options)
  #  return !options.prefix && !options.proto && self.name && !(self.name instanceof Dot);
  #end
end

module.exports = TFunction
