object ForOfStatement
  def init(identifier, index, expression, body)
    self.identifier = identifier
    self.index = index
    self.expression = expression
    self.body = body
    return self
  end

  def compile
    #if self.expression instanceof TRange
    #  return self.compileRange()
    #else
      return self.compileExpression()
    #end
  end

  def compileExpression
    rs = []

    if self.expression instanceof TIdentifier
      r1 = self.expression.compile()
    else
      r1 = scopes.reference()
      rs.push(r1 + '=' + self.expression.compile() + ';')
    end
    r2 = self.index ? self.index.compile() : scopes.reference()
    r3 = scopes.reference()
    scopes.pushIdentifier(self.identifier.value)

    rs.push('for (' + r2 + ' = 0, ' + r3 + ' = ' + r1 + '.length; ' + r2 + ' < ' + r3 + '; ' + r2 + '++) {')
    rs.push(self.identifier.compile() + ' = ' + r1 + '[' + r2 + '];')
    rs.push(self.body.compile())
    rs.push('}')
    return rs.join('')
  end

#ForOfStatement.prototype.compileRange = function () {
#  rs = [];
#  i = self.identifier.compile();
#  init, cond, update;
#  left, right, rl, rr;
#  range = self.expression;
#
#  scopes.pushIdentifier(self.identifier.value);
#
#  if range.numbers()
#    init = [ i + ' = ' + range.left.compile() ]
#
#    if range.up()
#      cond   = i + (range.exclusive ? ' < ' : ' <= ') + range.right.compile()
#      update = i + '++'
#    else
#      cond   = i + (range.exclusive ? ' > ' : ' >= ') + range.right.compile()
#      update = i + '--'
#    end
#  else
#    init = []
#
#    if range.left instanceof TNumber
#      l = range.left.value
#      init.push(i + ' = ' + l)
#    elsif range.left instanceof TIdentifier
#      l = range.left.value
#      init.push(i + ' = ' + l)
#    else
#      l = scopes.reference()
#      init.push(i + ' = ' + l + ' = ' + range.left.compile())
#    end
#
#    if range.right instanceof TNumber
#      r = range.right.value
#    elsif range.right instanceof TIdentifier
#      r = range.right.value
#    } else {
#      r = scopes.reference()
#      init.push(r + ' = ' + range.right.compile())
#    }
#
#    if range.exclusive
#      cond = l + ' > ' + r + ' ? ' + i + ' > '  + r + ' : ' + i + ' < '  + r
#    else
#      cond = l + ' > ' + r + ' ? ' + i + ' >= ' + r + ' : ' + i + ' <= ' + r
#    end
#    update = l + ' > ' + r + ' ? ' + i + '-- : ' + i + '++'
#  end
#
#  rs.push('for (' + [ init.join(', '), cond, update ].join('; ') + ') {')
#  rs.push(self.body.compile())
#  rs.push('}')
#  return rs.join('')
#};
end
