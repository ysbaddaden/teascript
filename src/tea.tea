exports.scopes = require('./scopes')

exports.Program = require('./program.js');
exports.Identifier = require('./identifier');
exports.Keyword = require('./keyword');
exports.Array = require('./types/array');
exports.Assoc = require('./types/assoc');
exports.Number = require('./types/number');
exports.Object = require('./types/object');
exports.String = require('./types/string');
exports.Range = require('./types/range');
exports.RegExp = require('./types/regexp');

exports.Call = require('./expressions/call.js');
exports.Condition = require('./expressions/condition.js');
exports.Dot = require('./expressions/dot.js');
exports.Index = require('./expressions/index.js');
exports.Operation = require('./expressions/operation.js')
exports.Paren = require('./expressions/paren.js')
exports.Splat = require('./expressions/splat.js')
exports.Unary = require('./expressions/unary.js')
exports.NewExpression = require('./expressions/new_expression.js')
exports.Super = require('./expressions/super.js')

exports.Body = require('./statements/body.js')
exports.CaseStatement = require('./statements/case_statement.js')
exports.DeleteStatement = require('./statements/delete_statement.js')
exports.ElsifStatement = require('./statements/elsif_statement.js')
exports.ElseStatement = require('./statements/else_statement.js')
exports.Statement = require('./statements/statement.js')
exports.ForOfStatement = require('./statements/for_of_statement.js')
exports.ForInStatement = require('./statements/for_in_statement.js')
exports.ClassStatement = require('./statements/class_statement.js')
exports.Function = require('./statements/function.js')
exports.IfStatement = require('./statements/if_statement.js')
exports.LoopStatement = require('./statements/loop_statement.js')
#exports.RequireStatement = require('./statements/require_statement.js')
exports.ReturnStatement = require('./statements/return_statement.js')
exports.StaticFunction = require('./statements/static_function.js')
exports.UnlessStatement = require('./statements/unless_statement.js')
exports.UntilStatement = require('./statements/until_statement.js')
exports.WhenStatement = require('./statements/when_statement.js')
exports.WhileStatement = require('./statements/while_statement.js')

exports.ThrowStatement = require('./statements/throw_statement.js')
exports.BeginStatement = require('./statements/begin_statement.js')
exports.RescueStatement = require('./statements/rescue_statement.js')

exports.CLASS_DEFINITION = "
__klass = function (superclass) {
    var klass = function () {
        if (typeof this.initialize === 'function') {
            this.initialize.apply(this, arguments);
        }
    };
    if (superclass) {
        klass.prototype = Object.create(superclass.prototype);
        klass.prototype.superclass = klass.superclass = superclass;
    }
    return klass.prototype['class'] = klass.prototype.constructor = klass;
};";

#exports.INCLUDE_DEFINITION = "
#__extend = function (destination, source) {
#    for (var property in source) {
#        if (source.hasOwnProperty(property) && property !== 'included') {
#            destination[property] = source[property];
#        }
#    }
#};
#__include = function (klass/*, object, ...*/) {
#    for (var i = 1, l = arguments.length; i < l; i++) {
#        var obj = arguments[i];
#        if (obj) {
#            __extend(klass.prototype, obj);
#            if (typeof obj.included === 'function') {
#                obj.included(klass);
#            }
#        }
#    }
#    return klass;
#};";

exports.parser = parser = require('./parser')
exports.parser.lexer = lexer = require('./lexer')
beautify = require('js-beautify').js_beautify

def exports.lex(source)
  lexer.setInput(source)
  return lexer.map(->(token) { return token.inspect() })
end

def exports.ast(source)
  return parser.parse(source + '\n\n')
end

def exports.compile(source, options)
  return beautify(exports.ast(source).compile(options), jslint_happy: true)
end

