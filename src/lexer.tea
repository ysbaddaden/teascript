words   = require('./lexer/words')
rewrite = require('./lexer/rewrite')
Token   = require('./lexer/token')
RE      = require('./lexer/definition').RE
REGEXP  = require('./lexer/definition').REGEXP

def Lexer(input)
  self.input  = input
  self.index  = 0
  self.line   = 1
  self.column = 1

  self.tokens = []
  self.state = []
  self.state.is = ->(name) { return this[this.length - 1] == name }

  def tokenize
    loop
      str = self.input.slice(self.index)

      unless str
        self.tokens.push(self.token('EOF'))
        break
      end

      next if self.state.is('embed') and self.match_embed(str)
      self.match(str)
    end

    return rewrite(self.tokens)
  end

  def match(str)
    if    m = str.match(RE.COMMENT)    then name = 'COMMENT'
    elsif     str.match(RE.LINEFEED)   then self.linefeed(); return
    elsif m = str.match(RE.SEMICOLON)  then name = m[0]
    elsif m = str.match(RE.BOOL)       then name = 'BOOLEAN'
    elsif m = str.match(RE.NIL)        then name = 'NIL'
    elsif m = str.match(RE.FLOAT)      then name = 'NUMBER'
    elsif m = str.match(RE.INTEGER)    then name = 'NUMBER'
    elsif     str.match(RE.REGEXP)     then self.regexp(str); return
    elsif m = str.match(RE.KEYWORDS)   then name = m[0]
    elsif m = str.match(RE.OPERATORS)  then name = m[0]
    elsif m = str.match(RE.PARENS)     then name = m[0]
    elsif m = str.match(RE.IDENTIFIER) then name = 'identifier'
    elsif m = str.match(RE.WHITESPACE) then name = 'whitespace'
    elsif     str.match(RE.STRING)     then self.string(str); return
    elsif     str.match(RE.STRING2)    then self.embedable_string(str); return
    else
      m = str.match(/^(.+)\b/)
      throw Error("unknown token #{m[0]} at #{self.line},#{self.column}")
    end

    self.tokens.push(self.token(name, m[0])) if name
  end

  def match_embed(str)
    if str.match(/^#\{/)
      self.tokens.push(self.token('+', '+'))
      self.tokens.push(self.token('(', '('))
    elsif str.match(/^\}/)
      if str[1] == '"'
        self.tokens.push(self.token(')', ')'))
        self.tokens.push(self.token(')', ')'))
        self.state.pop() # embed
        self.state.pop() # string
      else
        self.tokens.push(self.token(')', ')'))
        self.tokens.push(self.token('+', '+'))
        self.consume(-1)
        self.unput('"')
        self.state.pop() # embed
      end
    else
      return false
    end
    return true
  end

  def linefeed
    self.line += 1
    self.column = 0
    self.consume(1)
    self.tokens.push(self.token('LF'))
  end

  def embedable_string(str)
    self.string(str)

    if self.state.is('string')
      self.tokens.push(self.token(')', ')'))
      self.state.pop()
    end
  end

  def string(str)
    quote = str[0]
    idx   = 1
    value = ''
    re    = quote == '"' ? /^([^"]*")/ : /^([^']*')/

    loop
      if m = str.slice(idx).match(re)
        text = m[0]

        if quote == '"' and (j = text.match(/#\{/))
          value += text.slice(0, j.index) + quote
          self.embed()
          break
        else
          value += text

          if text.slice(-2) == "\\#{quote}"
            idx += text.length
          else
            break
          end
        end
      else
        throw Error("unterminated string")
      end
    end

    self.tokens.push(self.token('STRING', quote + value))
    self.line += (value.match(/\n/g) || '').length

    if self.state.is('string')
      self.tokens.push(self.token(')', ')'))
      self.consume(-1)
      self.state.pop()
    end

    #console.log('__STR:', str, quote + value, self.input.slice(self.index))
  end

  def embed
    if self.state.is('string')
      self.consume(-1)
    else
      self.tokens.push(self.token('(', '('))
      self.state.push('string')
      self.consume(-2)
    end
    self.state.push('embed')
  end

  def regexp(str)
    i = self.tokens.length - 1
    idx = 1

    while self.tokens[i] and self.tokens[i].name == 'whitespace' do
      i -= 1
    end

    if !self.tokens[i] or REGEXP.contains(self.tokens[i].name)
      loop
        m = str.slice(idx).indexOf('/')

        if m == -1
          throw Error('unterminated regexp')
        else
          idx += m + 1;

          if str.slice(idx - 2, idx) != '\\/'
            if mm = str.slice(idx).match(/^[gimy]*/)
              idx += mm[0].length;
            end

            self.tokens.push(self.token('REGEXP', str.slice(0, idx)))
            return
          end
        end
      end
    end

    self.tokens.push(self.token('/', '/'))
  end

  def token(name, value = nil)
    #console.log("TOKEN: " + name + " " + (value == null ? '' : (value == name ? '' : value)))
    self.consume(value.length) if value
    return new Token(name, value, self.line, self.column)
  end

  def consume(size)
    self.index  += size
    self.column += size
  end

  def unput(str)
    if self.index > 0
      self.input = self.input.slice(0, self.index) + str + self.input.slice(self.index)
    else
      self.input = str + self.input.slice(self.index)
    end
  end
end

module.exports = {
  setInput: ->(input) {
    this.tokens = new Lexer(input).tokenize()
  },

  lex: -> {
    token = this.tokens.shift()
    if token
      this.yytext   = token.value
      this.yyleng   = token.value ? token.value.length : 0
      this.yylineno = token.line - 1
      this.yycolumn = token.column
      return token.name
    else
      return 'EOF'
    end
  }
}

#def debug(code)
#  lexer = module.exports
#  lexer.setInput(code)
#
#  #while name = lexer.lex()
#  #  console.log("#{name} '#{lexer.yytext}' #{lexer.yyleng} #{lexer.yyline},#{lexer.yycolumn}")
#  #end
#
#  console.log(lexer.tokens.map(->(t) { return t.inspect() }).join(' '))
#  console.log("")
#end

#debug("def A(a)\nreturn a + 1\n\n\n end")
#debug("def A default = nil\nreturn a + 1\n end")
#debug("describe 'DSL', -> {\n  it 'must be ok', -> {\n    assert.ok true\n }\n}")
#debug("lmbd = ->(rs) { doSomething() }")
#debug("'I can\\'t be damned.'")
#debug("'This is a string\nspanning on\nmultiple lines'")
#debug('"total: #{amount} â‚¬"')
#debug('"debug: #{hello} #{world}".test(something)')
#debug('/azerty/i')
#debug('# this is a comment')
#debug("# this is a comment\n# spanning on\n# multiple lines")
#debug("select = readkey() - 1 #comment")
#debug("{ a: -> {},\n #comment\nb: -> {} }")
#debug('"unknown token #{self.line},#{self.column}"')

