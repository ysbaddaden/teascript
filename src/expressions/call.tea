Splat = require('./splat')

def Call(expression, args)
  self.init(expression, args)

  def init(expression, args)
    self.expression = expression
    self.arguments  = args || []
  end

  def callerName
    return self.expression.compile()
  end

  def compile
    self.parseArguments()

    if self.splat.length == 1 and self.args.length == 0
      return self.callerName() + '.apply(null, ' + self.splat[0] + ')'
    end

    if self.splat.length > 0
      self.splat.push('[' + self.args.join(', ') + ']') if self.args.length > 0
      return self.callerName() + '.apply(null, Array.prototype.concat.call(' + self.splat.join(', ') + '))'
    end

    return self.callerName() + '(' + self.args.join(', ') + ')'
  end

  def parseArguments
    self.args  = [];
    self.splat = [];

    for decl of self.arguments
      if decl.constructor == Splat
        self.splat.push('[' + self.args.join(', ') + ']') if self.args.length > 0
        self.splat.push(decl.compile())
        self.args = []
      else
        self.args.push(decl.compile())
      end
    end
  end
end

module.exports = Call
