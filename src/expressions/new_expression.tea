Splat = require('./splat')
Call  = require('./call')

# The solution for splat arguments when newing an object, comes
# from CoffeeScript:
splatConstructorTemplate =
  "(function (fn, args, ctor) {
      ctor.constructor = fn.constructor;
      var child = new ctor(), result = fn.apply(child, args), t = typeof result;
      return (t == 'object' || t == 'function') result || child : child;
  }(%{FUNCTION}, %{ARGS}, function () {}))"

def NewExpression(expression, args) < Call
  self.init(expression, args) # Call.prototype.init.call(self, expression, args);

  def compile
    self.parseArguments()

    if self.splat.length > 0
      self.splat.push('[' + self.args.join(', ') + ']') if self.args.length > 0
      return splatConstructorTemplate.replace(/(%\{(.+?)\})/g, ->(x) {
        case x
        when '%{FUNCTION}' then return self.expression.compile()
        when '%{ARGS}'     then return '[].concat(' + self.splat.join(',')  + ')'
        end
      })
    end

    return 'new ' + self.expression.compile() + '(' + self.args.join(', ') + ')';
  end
end

module.exports = NewExpression
